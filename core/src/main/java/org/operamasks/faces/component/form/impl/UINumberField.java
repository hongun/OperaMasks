/**
 * UINumberField.java
 * DO NOT EDIT THIS FILE
 * This file was automatically generated by org.operamasks.faces.tools.apt.ComponentAnnotationProcessorFactory
 * at Sat Nov 03 15:46:26 CST 2012
 */

package org.operamasks.faces.component.form.impl;

import org.operamasks.faces.component.form.base.UINumberFieldBase;

@javax.annotation.Generated(value="org.operamasks.faces.tools.apt.ComponentAnnotationProcessorFactory", date="2012-11-03T15:46:26Z")
public class UINumberField extends UINumberFieldBase {
    public static final String COMPONENT_FAMILY = "org.operamasks.faces.component.form.impl.UINumberField";
    public static final String COMPONENT_TYPE = "org.operamasks.faces.component.form.impl.UINumberField";

    public UINumberField() {
	super.setRendererType("org.operamasks.faces.component.form.impl.UINumberField");
    }

    public String getFamily() {
	return COMPONENT_FAMILY;
    }

    public java.lang.Boolean getAllowDecimals() {
	if (this.allowDecimals != null) {
	    return this.allowDecimals;
	}
	javax.el.ValueExpression ve = this.getValueExpression("allowDecimals");
	if (ve != null) {
	    try {
		return (java.lang.Boolean)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setAllowDecimals(java.lang.Boolean value) {
	this.allowDecimals = value;
    }

    public java.lang.Boolean getAllowNegative() {
	if (this.allowNegative != null) {
	    return this.allowNegative;
	}
	javax.el.ValueExpression ve = this.getValueExpression("allowNegative");
	if (ve != null) {
	    try {
		return (java.lang.Boolean)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setAllowNegative(java.lang.Boolean value) {
	this.allowNegative = value;
    }

    public java.lang.String getBaseChars() {
	if (this.baseChars != null) {
	    return this.baseChars;
	}
	javax.el.ValueExpression ve = this.getValueExpression("baseChars");
	if (ve != null) {
	    try {
		return (java.lang.String)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setBaseChars(java.lang.String value) {
	this.baseChars = value;
    }

    public java.lang.Integer getDecimalPrecision() {
	if (this.decimalPrecision != null) {
	    return this.decimalPrecision;
	}
	javax.el.ValueExpression ve = this.getValueExpression("decimalPrecision");
	if (ve != null) {
	    try {
		return (java.lang.Integer)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setDecimalPrecision(java.lang.Integer value) {
	this.decimalPrecision = value;
    }

    public java.lang.String getDecimalSeparator() {
	if (this.decimalSeparator != null) {
	    return this.decimalSeparator;
	}
	javax.el.ValueExpression ve = this.getValueExpression("decimalSeparator");
	if (ve != null) {
	    try {
		return (java.lang.String)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setDecimalSeparator(java.lang.String value) {
	this.decimalSeparator = value;
    }

    public java.lang.String getFieldClass() {
	if (this.fieldClass != null) {
	    return this.fieldClass;
	}
	javax.el.ValueExpression ve = this.getValueExpression("fieldClass");
	if (ve != null) {
	    try {
		return (java.lang.String)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setFieldClass(java.lang.String value) {
	this.fieldClass = value;
    }

    public java.lang.String getMaxText() {
	if (this.maxText != null) {
	    return this.maxText;
	}
	javax.el.ValueExpression ve = this.getValueExpression("maxText");
	if (ve != null) {
	    try {
		return (java.lang.String)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setMaxText(java.lang.String value) {
	this.maxText = value;
    }

    public java.lang.Integer getMaxValue() {
	if (this.maxValue != null) {
	    return this.maxValue;
	}
	javax.el.ValueExpression ve = this.getValueExpression("maxValue");
	if (ve != null) {
	    try {
		return (java.lang.Integer)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setMaxValue(java.lang.Integer value) {
	this.maxValue = value;
    }

    public java.lang.String getMinText() {
	if (this.minText != null) {
	    return this.minText;
	}
	javax.el.ValueExpression ve = this.getValueExpression("minText");
	if (ve != null) {
	    try {
		return (java.lang.String)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setMinText(java.lang.String value) {
	this.minText = value;
    }

    public java.lang.Integer getMinValue() {
	if (this.minValue != null) {
	    return this.minValue;
	}
	javax.el.ValueExpression ve = this.getValueExpression("minValue");
	if (ve != null) {
	    try {
		return (java.lang.Integer)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setMinValue(java.lang.Integer value) {
	this.minValue = value;
    }

    public java.lang.String getNanText() {
	if (this.nanText != null) {
	    return this.nanText;
	}
	javax.el.ValueExpression ve = this.getValueExpression("nanText");
	if (ve != null) {
	    try {
		return (java.lang.String)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setNanText(java.lang.String value) {
	this.nanText = value;
    }

    public Object saveState(javax.faces.context.FacesContext context) {
	return new Object[] {
	    super.saveState(context),
	    this.allowDecimals,
	    this.allowNegative,
	    this.baseChars,
	    this.decimalPrecision,
	    this.decimalSeparator,
	    this.fieldClass,
	    this.maxText,
	    this.maxValue,
	    this.minText,
	    this.minValue,
	    this.nanText,
	};
    }

    public void restoreState(javax.faces.context.FacesContext context, Object state) {
	Object[] values = (Object[])state;
	super.restoreState(context, values[0]);
	this.allowDecimals = (java.lang.Boolean)values[1];
	this.allowNegative = (java.lang.Boolean)values[2];
	this.baseChars = (java.lang.String)values[3];
	this.decimalPrecision = (java.lang.Integer)values[4];
	this.decimalSeparator = (java.lang.String)values[5];
	this.fieldClass = (java.lang.String)values[6];
	this.maxText = (java.lang.String)values[7];
	this.maxValue = (java.lang.Integer)values[8];
	this.minText = (java.lang.String)values[9];
	this.minValue = (java.lang.Integer)values[10];
	this.nanText = (java.lang.String)values[11];
    }

}
