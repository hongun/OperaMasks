/**
 * UISimpleHtmlEditor.java
 * DO NOT EDIT THIS FILE
 * This file was automatically generated by org.operamasks.faces.tools.apt.ComponentAnnotationProcessorFactory
 * at Sat Nov 03 15:46:26 CST 2012
 */

package org.operamasks.faces.component.form.impl;

import org.operamasks.faces.component.form.base.UISimpleHtmlEditorBase;

@javax.annotation.Generated(value="org.operamasks.faces.tools.apt.ComponentAnnotationProcessorFactory", date="2012-11-03T15:46:26Z")
public class UISimpleHtmlEditor extends UISimpleHtmlEditorBase {
    public static final String COMPONENT_FAMILY = "org.operamasks.faces.component.form.impl.UISimpleHtmlEditor";
    public static final String COMPONENT_TYPE = "org.operamasks.faces.component.form.impl.UISimpleHtmlEditor";

    public UISimpleHtmlEditor() {
	super.setRendererType("org.operamasks.faces.component.form.impl.UISimpleHtmlEditor");
    }

    public String getFamily() {
	return COMPONENT_FAMILY;
    }

    public java.lang.String getCreateLinkText() {
	if (this.createLinkText != null) {
	    return this.createLinkText;
	}
	javax.el.ValueExpression ve = this.getValueExpression("createLinkText");
	if (ve != null) {
	    try {
		return (java.lang.String)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setCreateLinkText(java.lang.String value) {
	this.createLinkText = value;
    }

    public java.lang.String getDefaultLinkValue() {
	if (this.defaultLinkValue != null) {
	    return this.defaultLinkValue;
	}
	javax.el.ValueExpression ve = this.getValueExpression("defaultLinkValue");
	if (ve != null) {
	    try {
		return (java.lang.String)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setDefaultLinkValue(java.lang.String value) {
	this.defaultLinkValue = value;
    }

    public java.lang.Boolean getEnableAlignments() {
	if (this.enableAlignments != null) {
	    return this.enableAlignments;
	}
	javax.el.ValueExpression ve = this.getValueExpression("enableAlignments");
	if (ve != null) {
	    try {
		return (java.lang.Boolean)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setEnableAlignments(java.lang.Boolean value) {
	this.enableAlignments = value;
    }

    public java.lang.Boolean getEnableColors() {
	if (this.enableColors != null) {
	    return this.enableColors;
	}
	javax.el.ValueExpression ve = this.getValueExpression("enableColors");
	if (ve != null) {
	    try {
		return (java.lang.Boolean)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setEnableColors(java.lang.Boolean value) {
	this.enableColors = value;
    }

    public java.lang.Boolean getEnableFont() {
	if (this.enableFont != null) {
	    return this.enableFont;
	}
	javax.el.ValueExpression ve = this.getValueExpression("enableFont");
	if (ve != null) {
	    try {
		return (java.lang.Boolean)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setEnableFont(java.lang.Boolean value) {
	this.enableFont = value;
    }

    public java.lang.Boolean getEnableFontSize() {
	if (this.enableFontSize != null) {
	    return this.enableFontSize;
	}
	javax.el.ValueExpression ve = this.getValueExpression("enableFontSize");
	if (ve != null) {
	    try {
		return (java.lang.Boolean)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setEnableFontSize(java.lang.Boolean value) {
	this.enableFontSize = value;
    }

    public java.lang.Boolean getEnableFormat() {
	if (this.enableFormat != null) {
	    return this.enableFormat;
	}
	javax.el.ValueExpression ve = this.getValueExpression("enableFormat");
	if (ve != null) {
	    try {
		return (java.lang.Boolean)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setEnableFormat(java.lang.Boolean value) {
	this.enableFormat = value;
    }

    public java.lang.Boolean getEnableLinks() {
	if (this.enableLinks != null) {
	    return this.enableLinks;
	}
	javax.el.ValueExpression ve = this.getValueExpression("enableLinks");
	if (ve != null) {
	    try {
		return (java.lang.Boolean)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setEnableLinks(java.lang.Boolean value) {
	this.enableLinks = value;
    }

    public java.lang.Boolean getEnableLists() {
	if (this.enableLists != null) {
	    return this.enableLists;
	}
	javax.el.ValueExpression ve = this.getValueExpression("enableLists");
	if (ve != null) {
	    try {
		return (java.lang.Boolean)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setEnableLists(java.lang.Boolean value) {
	this.enableLists = value;
    }

    public java.lang.Boolean getEnableSourceEdit() {
	if (this.enableSourceEdit != null) {
	    return this.enableSourceEdit;
	}
	javax.el.ValueExpression ve = this.getValueExpression("enableSourceEdit");
	if (ve != null) {
	    try {
		return (java.lang.Boolean)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setEnableSourceEdit(java.lang.Boolean value) {
	this.enableSourceEdit = value;
    }

    public java.lang.String getFontFamilies() {
	if (this.fontFamilies != null) {
	    return this.fontFamilies;
	}
	javax.el.ValueExpression ve = this.getValueExpression("fontFamilies");
	if (ve != null) {
	    try {
		return (java.lang.String)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setFontFamilies(java.lang.String value) {
	this.fontFamilies = value;
    }

    public Object saveState(javax.faces.context.FacesContext context) {
	return new Object[] {
	    super.saveState(context),
	    this.createLinkText,
	    this.defaultLinkValue,
	    this.enableAlignments,
	    this.enableColors,
	    this.enableFont,
	    this.enableFontSize,
	    this.enableFormat,
	    this.enableLinks,
	    this.enableLists,
	    this.enableSourceEdit,
	    this.fontFamilies,
	};
    }

    public void restoreState(javax.faces.context.FacesContext context, Object state) {
	Object[] values = (Object[])state;
	super.restoreState(context, values[0]);
	this.createLinkText = (java.lang.String)values[1];
	this.defaultLinkValue = (java.lang.String)values[2];
	this.enableAlignments = (java.lang.Boolean)values[3];
	this.enableColors = (java.lang.Boolean)values[4];
	this.enableFont = (java.lang.Boolean)values[5];
	this.enableFontSize = (java.lang.Boolean)values[6];
	this.enableFormat = (java.lang.Boolean)values[7];
	this.enableLinks = (java.lang.Boolean)values[8];
	this.enableLists = (java.lang.Boolean)values[9];
	this.enableSourceEdit = (java.lang.Boolean)values[10];
	this.fontFamilies = (java.lang.String)values[11];
    }

}
