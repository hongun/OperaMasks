/**
 * UITabLayout.java
 * DO NOT EDIT THIS FILE
 * This file was automatically generated by org.operamasks.faces.tools.apt.ComponentAnnotationProcessorFactory
 * at Sat Nov 03 15:46:26 CST 2012
 */

package org.operamasks.faces.component.layout.impl;

import org.operamasks.faces.component.layout.base.UITabLayoutBase;

@javax.annotation.Generated(value="org.operamasks.faces.tools.apt.ComponentAnnotationProcessorFactory", date="2012-11-03T15:46:26Z")
public class UITabLayout extends UITabLayoutBase {
    public static final String COMPONENT_FAMILY = "org.operamasks.faces.component.layout.impl.UITabLayout";
    public static final String COMPONENT_TYPE = "org.operamasks.faces.component.layout.impl.UITabLayout";

    public UITabLayout() {
	super.setRendererType("org.operamasks.faces.component.layout.impl.UITabLayout");
    }

    public String getFamily() {
	return COMPONENT_FAMILY;
    }

    public java.lang.Integer getActiveTab() {
	if (this.activeTab != null) {
	    return this.activeTab;
	}
	javax.el.ValueExpression ve = this.getValueExpression("activeTab");
	if (ve != null) {
	    try {
		return (java.lang.Integer)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setActiveTab(java.lang.Integer value) {
	this.activeTab = value;
    }

    public java.lang.Boolean getAnimScroll() {
	if (this.animScroll != null) {
	    return this.animScroll;
	}
	javax.el.ValueExpression ve = this.getValueExpression("animScroll");
	if (ve != null) {
	    try {
		return (java.lang.Boolean)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setAnimScroll(java.lang.Boolean value) {
	this.animScroll = value;
    }

    public java.lang.String getAutoTabSelector() {
	if (this.autoTabSelector != null) {
	    return this.autoTabSelector;
	}
	javax.el.ValueExpression ve = this.getValueExpression("autoTabSelector");
	if (ve != null) {
	    try {
		return (java.lang.String)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setAutoTabSelector(java.lang.String value) {
	this.autoTabSelector = value;
    }

    public java.lang.Boolean getAutoTabs() {
	if (this.autoTabs != null) {
	    return this.autoTabs;
	}
	javax.el.ValueExpression ve = this.getValueExpression("autoTabs");
	if (ve != null) {
	    try {
		return (java.lang.Boolean)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setAutoTabs(java.lang.Boolean value) {
	this.autoTabs = value;
    }

    public java.lang.Boolean getDeferredRender() {
	if (this.deferredRender != null) {
	    return this.deferredRender;
	}
	javax.el.ValueExpression ve = this.getValueExpression("deferredRender");
	if (ve != null) {
	    try {
		return (java.lang.Boolean)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setDeferredRender(java.lang.Boolean value) {
	this.deferredRender = value;
    }

    public java.lang.Boolean getEnableTabScroll() {
	if (this.enableTabScroll != null) {
	    return this.enableTabScroll;
	}
	javax.el.ValueExpression ve = this.getValueExpression("enableTabScroll");
	if (ve != null) {
	    try {
		return (java.lang.Boolean)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setEnableTabScroll(java.lang.Boolean value) {
	this.enableTabScroll = value;
    }

    public java.lang.Integer getMinTabWidth() {
	if (this.minTabWidth != null) {
	    return this.minTabWidth;
	}
	javax.el.ValueExpression ve = this.getValueExpression("minTabWidth");
	if (ve != null) {
	    try {
		return (java.lang.Integer)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setMinTabWidth(java.lang.Integer value) {
	this.minTabWidth = value;
    }

    public java.lang.Boolean getMonitorResize() {
	if (this.monitorResize != null) {
	    return this.monitorResize;
	}
	javax.el.ValueExpression ve = this.getValueExpression("monitorResize");
	if (ve != null) {
	    try {
		return (java.lang.Boolean)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setMonitorResize(java.lang.Boolean value) {
	this.monitorResize = value;
    }

    public java.lang.Boolean getPlain() {
	if (this.plain != null) {
	    return this.plain;
	}
	javax.el.ValueExpression ve = this.getValueExpression("plain");
	if (ve != null) {
	    try {
		return (java.lang.Boolean)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setPlain(java.lang.Boolean value) {
	this.plain = value;
    }

    public java.lang.Boolean getResizeTabs() {
	if (this.resizeTabs != null) {
	    return this.resizeTabs;
	}
	javax.el.ValueExpression ve = this.getValueExpression("resizeTabs");
	if (ve != null) {
	    try {
		return (java.lang.Boolean)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setResizeTabs(java.lang.Boolean value) {
	this.resizeTabs = value;
    }

    public java.lang.Boolean getScrollDuration() {
	if (this.scrollDuration != null) {
	    return this.scrollDuration;
	}
	javax.el.ValueExpression ve = this.getValueExpression("scrollDuration");
	if (ve != null) {
	    try {
		return (java.lang.Boolean)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setScrollDuration(java.lang.Boolean value) {
	this.scrollDuration = value;
    }

    public java.lang.Integer getScrollIncrement() {
	if (this.scrollIncrement != null) {
	    return this.scrollIncrement;
	}
	javax.el.ValueExpression ve = this.getValueExpression("scrollIncrement");
	if (ve != null) {
	    try {
		return (java.lang.Integer)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setScrollIncrement(java.lang.Integer value) {
	this.scrollIncrement = value;
    }

    public java.lang.Integer getScrollRepeatInterval() {
	if (this.scrollRepeatInterval != null) {
	    return this.scrollRepeatInterval;
	}
	javax.el.ValueExpression ve = this.getValueExpression("scrollRepeatInterval");
	if (ve != null) {
	    try {
		return (java.lang.Integer)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setScrollRepeatInterval(java.lang.Integer value) {
	this.scrollRepeatInterval = value;
    }

    public java.lang.Integer getTabMargin() {
	if (this.tabMargin != null) {
	    return this.tabMargin;
	}
	javax.el.ValueExpression ve = this.getValueExpression("tabMargin");
	if (ve != null) {
	    try {
		return (java.lang.Integer)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setTabMargin(java.lang.Integer value) {
	this.tabMargin = value;
    }

    public java.lang.String getTabPosition() {
	if (this.tabPosition != null) {
	    return this.tabPosition;
	}
	javax.el.ValueExpression ve = this.getValueExpression("tabPosition");
	if (ve != null) {
	    try {
		return (java.lang.String)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setTabPosition(java.lang.String value) {
	this.tabPosition = value;
    }

    public java.lang.Integer getTabWidth() {
	if (this.tabWidth != null) {
	    return this.tabWidth;
	}
	javax.el.ValueExpression ve = this.getValueExpression("tabWidth");
	if (ve != null) {
	    try {
		return (java.lang.Integer)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setTabWidth(java.lang.Integer value) {
	this.tabWidth = value;
    }

    public java.lang.Integer getWheelIncrement() {
	if (this.wheelIncrement != null) {
	    return this.wheelIncrement;
	}
	javax.el.ValueExpression ve = this.getValueExpression("wheelIncrement");
	if (ve != null) {
	    try {
		return (java.lang.Integer)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setWheelIncrement(java.lang.Integer value) {
	this.wheelIncrement = value;
    }

    public Object saveState(javax.faces.context.FacesContext context) {
	return new Object[] {
	    super.saveState(context),
	    this.activeTab,
	    this.animScroll,
	    this.autoTabSelector,
	    this.autoTabs,
	    this.deferredRender,
	    this.enableTabScroll,
	    this.minTabWidth,
	    this.monitorResize,
	    this.plain,
	    this.resizeTabs,
	    this.scrollDuration,
	    this.scrollIncrement,
	    this.scrollRepeatInterval,
	    this.tabMargin,
	    this.tabPosition,
	    this.tabWidth,
	    this.wheelIncrement,
	};
    }

    public void restoreState(javax.faces.context.FacesContext context, Object state) {
	Object[] values = (Object[])state;
	super.restoreState(context, values[0]);
	this.activeTab = (java.lang.Integer)values[1];
	this.animScroll = (java.lang.Boolean)values[2];
	this.autoTabSelector = (java.lang.String)values[3];
	this.autoTabs = (java.lang.Boolean)values[4];
	this.deferredRender = (java.lang.Boolean)values[5];
	this.enableTabScroll = (java.lang.Boolean)values[6];
	this.minTabWidth = (java.lang.Integer)values[7];
	this.monitorResize = (java.lang.Boolean)values[8];
	this.plain = (java.lang.Boolean)values[9];
	this.resizeTabs = (java.lang.Boolean)values[10];
	this.scrollDuration = (java.lang.Boolean)values[11];
	this.scrollIncrement = (java.lang.Integer)values[12];
	this.scrollRepeatInterval = (java.lang.Integer)values[13];
	this.tabMargin = (java.lang.Integer)values[14];
	this.tabPosition = (java.lang.String)values[15];
	this.tabWidth = (java.lang.Integer)values[16];
	this.wheelIncrement = (java.lang.Integer)values[17];
    }

}
