/**
 * UITimeField.java
 * DO NOT EDIT THIS FILE
 * This file was automatically generated by org.operamasks.faces.tools.apt.ComponentAnnotationProcessorFactory
 * at Sat Nov 03 15:46:26 CST 2012
 */

package org.operamasks.faces.component.form.impl;

import org.operamasks.faces.component.form.base.UITimeFieldBase;

@javax.annotation.Generated(value="org.operamasks.faces.tools.apt.ComponentAnnotationProcessorFactory", date="2012-11-03T15:46:26Z")
public class UITimeField extends UITimeFieldBase {
    public static final String COMPONENT_FAMILY = "org.operamasks.faces.component.form.impl.UITimeField";
    public static final String COMPONENT_TYPE = "org.operamasks.faces.component.form.impl.UITimeField";

    public UITimeField() {
	super.setRendererType("org.operamasks.faces.component.form.impl.UITimeField");
    }

    public String getFamily() {
	return COMPONENT_FAMILY;
    }

    public java.lang.String getAltFormats() {
	if (this.altFormats != null) {
	    return this.altFormats;
	}
	javax.el.ValueExpression ve = this.getValueExpression("altFormats");
	if (ve != null) {
	    try {
		return (java.lang.String)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setAltFormats(java.lang.String value) {
	this.altFormats = value;
    }

    public java.lang.String getFormat() {
	if (this.format != null) {
	    return this.format;
	}
	javax.el.ValueExpression ve = this.getValueExpression("format");
	if (ve != null) {
	    try {
		return (java.lang.String)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setFormat(java.lang.String value) {
	this.format = value;
    }

    public java.lang.Integer getIncrement() {
	if (this.increment != null) {
	    return this.increment;
	}
	javax.el.ValueExpression ve = this.getValueExpression("increment");
	if (ve != null) {
	    try {
		return (java.lang.Integer)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setIncrement(java.lang.Integer value) {
	this.increment = value;
    }

    public java.lang.String getInvalidText() {
	if (this.invalidText != null) {
	    return this.invalidText;
	}
	javax.el.ValueExpression ve = this.getValueExpression("invalidText");
	if (ve != null) {
	    try {
		return (java.lang.String)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setInvalidText(java.lang.String value) {
	this.invalidText = value;
    }

    public java.lang.String getMaxText() {
	if (this.maxText != null) {
	    return this.maxText;
	}
	javax.el.ValueExpression ve = this.getValueExpression("maxText");
	if (ve != null) {
	    try {
		return (java.lang.String)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setMaxText(java.lang.String value) {
	this.maxText = value;
    }

    public java.lang.String getMaxValue() {
	if (this.maxValue != null) {
	    return this.maxValue;
	}
	javax.el.ValueExpression ve = this.getValueExpression("maxValue");
	if (ve != null) {
	    try {
		return (java.lang.String)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setMaxValue(java.lang.String value) {
	this.maxValue = value;
    }

    public java.lang.String getMinText() {
	if (this.minText != null) {
	    return this.minText;
	}
	javax.el.ValueExpression ve = this.getValueExpression("minText");
	if (ve != null) {
	    try {
		return (java.lang.String)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setMinText(java.lang.String value) {
	this.minText = value;
    }

    public java.lang.String getMinValue() {
	if (this.minValue != null) {
	    return this.minValue;
	}
	javax.el.ValueExpression ve = this.getValueExpression("minValue");
	if (ve != null) {
	    try {
		return (java.lang.String)ve.getValue(this.getFacesContext().getELContext());
	    } catch (javax.el.ELException e) {
		throw new javax.faces.FacesException(e);
	    }
	}
	return null;
    }

    public void setMinValue(java.lang.String value) {
	this.minValue = value;
    }

    public Object saveState(javax.faces.context.FacesContext context) {
	return new Object[] {
	    super.saveState(context),
	    this.altFormats,
	    this.format,
	    this.increment,
	    this.invalidText,
	    this.maxText,
	    this.maxValue,
	    this.minText,
	    this.minValue,
	};
    }

    public void restoreState(javax.faces.context.FacesContext context, Object state) {
	Object[] values = (Object[])state;
	super.restoreState(context, values[0]);
	this.altFormats = (java.lang.String)values[1];
	this.format = (java.lang.String)values[2];
	this.increment = (java.lang.Integer)values[3];
	this.invalidText = (java.lang.String)values[4];
	this.maxText = (java.lang.String)values[5];
	this.maxValue = (java.lang.String)values[6];
	this.minText = (java.lang.String)values[7];
	this.minValue = (java.lang.String)values[8];
    }

}
