<?xml version="1.0" encoding="UTF-8"?>
<f:view xmlns:f="http://java.sun.com/jsf/core"
        xmlns="http://www.w3.org/1999/xhtml"
        xmlns:h="http://java.sun.com/jsf/html"
        xmlns:w="http://www.apusic.com/jsf/widget"
        xmlns:ajax="http://www.apusic.com/jsf/ajax"
        renderKitId="AJAX">
<w:head>
<w:stylesheet src="/common/resources/examples.css"/>
</w:head>
<w:page title="File Upload" skin="default">
  <div class="examDesc">
  <p>本例展示如何使用FileUpload组件</p>
  </div>
  <w:form id="myForm" enctype="multipart/form-data">
  <!-- fileUpload1和fileUpload2两个file输入框，选择直接处理数据流，这里通过设置uploadListener参数为一个el表达式，把处理方法绑定到服务器端一个mb的方法上。
为何要自己处理文件数据流呢？是因为在很多场合下，上传的文件不一定是简单当作一个文件另存在服务器上，用户可能会选择把文件保存到数据库当中，或自己决定如何去处理这个数据。-->
	  <w:fileUpload id="fileUpload1" uploadListener="#{FileUploadProgressBean.processUpload}" binding="#{FileUploadProgressBean.fileUpload1}" rich="true" maxSize="100k" required="true" />
	<br />
	  <w:fileUpload id="fileUpload2" uploadListener="#{FileUploadProgressBean.processUpload}" rich="false" maxSize="100k" />
	  <br />
	  <!-- fileUpload3选择了一种简单的处理方式，直接把上传的文件当作另存为服务器上的一个文件，writeTo属性指定了服务器端另存为的文件名。 -->
	  <w:fileUpload id="fileUpload3" writeTo="#{FileUploadProgressBean.fileUpload3WriteTo}" rich="true" browseIcon="images/select.gif" maxSize="100k" />
	  <br />
	  <w:button action="#{FileUploadProgressBean.action}" value="Upload" />
	  <w:fileUploadProgress startMessage="开始上传" uploadingMessage="正在上传，已经上传{readBytes}k/{total}k({percentage}%)" completeMessage="上传结束，总共{total}k" errorMessage="上传错误：{error}" />
  </w:form>
  <br />
</w:page>
</f:view>
